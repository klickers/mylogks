# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type LogEntry {
  id: ID!
  group: LogGroup
  content: LogEntry_content_Document
  createdAt: DateTime
}

type LogEntry_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input LogEntryWhereUniqueInput {
  id: ID
  createdAt: DateTime
}

input LogEntryWhereInput {
  AND: [LogEntryWhereInput!]
  OR: [LogEntryWhereInput!]
  NOT: [LogEntryWhereInput!]
  id: IDFilter
  group: LogGroupWhereInput
  createdAt: DateTimeFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input LogEntryOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input LogEntryUpdateInput {
  group: LogGroupRelateToOneForUpdateInput
  content: JSON
  createdAt: DateTime
}

input LogGroupRelateToOneForUpdateInput {
  create: LogGroupCreateInput
  connect: LogGroupWhereUniqueInput
  disconnect: Boolean
}

input LogEntryUpdateArgs {
  where: LogEntryWhereUniqueInput!
  data: LogEntryUpdateInput!
}

input LogEntryCreateInput {
  group: LogGroupRelateToOneForCreateInput
  content: JSON
  createdAt: DateTime
}

input LogGroupRelateToOneForCreateInput {
  create: LogGroupCreateInput
  connect: LogGroupWhereUniqueInput
}

type LogType {
  id: ID!
  name: String
  slug: String
}

input LogTypeWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input LogTypeWhereInput {
  AND: [LogTypeWhereInput!]
  OR: [LogTypeWhereInput!]
  NOT: [LogTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input LogTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input LogTypeUpdateInput {
  name: String
  slug: String
}

input LogTypeUpdateArgs {
  where: LogTypeWhereUniqueInput!
  data: LogTypeUpdateInput!
}

input LogTypeCreateInput {
  name: String
  slug: String
}

type LogCategory {
  id: ID!
  name: String
  slug: String
}

input LogCategoryWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input LogCategoryWhereInput {
  AND: [LogCategoryWhereInput!]
  OR: [LogCategoryWhereInput!]
  NOT: [LogCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
}

input LogCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input LogCategoryUpdateInput {
  name: String
  slug: String
}

input LogCategoryUpdateArgs {
  where: LogCategoryWhereUniqueInput!
  data: LogCategoryUpdateInput!
}

input LogCategoryCreateInput {
  name: String
  slug: String
}

type LogGroup {
  id: ID!
  name: String
  slug: String
  type: LogType
  category(where: LogCategoryWhereInput! = {}, orderBy: [LogCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogCategoryWhereUniqueInput): [LogCategory!]
  categoryCount(where: LogCategoryWhereInput! = {}): Int
  startDate: CalendarDay
  endDate: CalendarDay
  completed: Boolean
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input LogGroupWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input LogGroupWhereInput {
  AND: [LogGroupWhereInput!]
  OR: [LogGroupWhereInput!]
  NOT: [LogGroupWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  type: LogTypeWhereInput
  category: LogCategoryManyRelationFilter
  startDate: CalendarDayNullableFilter
  endDate: CalendarDayNullableFilter
  completed: BooleanFilter
}

input LogCategoryManyRelationFilter {
  every: LogCategoryWhereInput
  some: LogCategoryWhereInput
  none: LogCategoryWhereInput
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input LogGroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  completed: OrderDirection
}

input LogGroupUpdateInput {
  name: String
  slug: String
  type: LogTypeRelateToOneForUpdateInput
  category: LogCategoryRelateToManyForUpdateInput
  startDate: CalendarDay
  endDate: CalendarDay
  completed: Boolean
}

input LogTypeRelateToOneForUpdateInput {
  create: LogTypeCreateInput
  connect: LogTypeWhereUniqueInput
  disconnect: Boolean
}

input LogCategoryRelateToManyForUpdateInput {
  disconnect: [LogCategoryWhereUniqueInput!]
  set: [LogCategoryWhereUniqueInput!]
  create: [LogCategoryCreateInput!]
  connect: [LogCategoryWhereUniqueInput!]
}

input LogGroupUpdateArgs {
  where: LogGroupWhereUniqueInput!
  data: LogGroupUpdateInput!
}

input LogGroupCreateInput {
  name: String
  slug: String
  type: LogTypeRelateToOneForCreateInput
  category: LogCategoryRelateToManyForCreateInput
  startDate: CalendarDay
  endDate: CalendarDay
  completed: Boolean
}

input LogTypeRelateToOneForCreateInput {
  create: LogTypeCreateInput
  connect: LogTypeWhereUniqueInput
}

input LogCategoryRelateToManyForCreateInput {
  create: [LogCategoryCreateInput!]
  connect: [LogCategoryWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createLogEntry(data: LogEntryCreateInput!): LogEntry
  createLogEntries(data: [LogEntryCreateInput!]!): [LogEntry]
  updateLogEntry(where: LogEntryWhereUniqueInput!, data: LogEntryUpdateInput!): LogEntry
  updateLogEntries(data: [LogEntryUpdateArgs!]!): [LogEntry]
  deleteLogEntry(where: LogEntryWhereUniqueInput!): LogEntry
  deleteLogEntries(where: [LogEntryWhereUniqueInput!]!): [LogEntry]
  createLogType(data: LogTypeCreateInput!): LogType
  createLogTypes(data: [LogTypeCreateInput!]!): [LogType]
  updateLogType(where: LogTypeWhereUniqueInput!, data: LogTypeUpdateInput!): LogType
  updateLogTypes(data: [LogTypeUpdateArgs!]!): [LogType]
  deleteLogType(where: LogTypeWhereUniqueInput!): LogType
  deleteLogTypes(where: [LogTypeWhereUniqueInput!]!): [LogType]
  createLogCategory(data: LogCategoryCreateInput!): LogCategory
  createLogCategories(data: [LogCategoryCreateInput!]!): [LogCategory]
  updateLogCategory(where: LogCategoryWhereUniqueInput!, data: LogCategoryUpdateInput!): LogCategory
  updateLogCategories(data: [LogCategoryUpdateArgs!]!): [LogCategory]
  deleteLogCategory(where: LogCategoryWhereUniqueInput!): LogCategory
  deleteLogCategories(where: [LogCategoryWhereUniqueInput!]!): [LogCategory]
  createLogGroup(data: LogGroupCreateInput!): LogGroup
  createLogGroups(data: [LogGroupCreateInput!]!): [LogGroup]
  updateLogGroup(where: LogGroupWhereUniqueInput!, data: LogGroupUpdateInput!): LogGroup
  updateLogGroups(data: [LogGroupUpdateArgs!]!): [LogGroup]
  deleteLogGroup(where: LogGroupWhereUniqueInput!): LogGroup
  deleteLogGroups(where: [LogGroupWhereUniqueInput!]!): [LogGroup]
}

type Query {
  logEntry(where: LogEntryWhereUniqueInput!): LogEntry
  logEntries(where: LogEntryWhereInput! = {}, orderBy: [LogEntryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogEntryWhereUniqueInput): [LogEntry!]
  logEntriesCount(where: LogEntryWhereInput! = {}): Int
  logType(where: LogTypeWhereUniqueInput!): LogType
  logTypes(where: LogTypeWhereInput! = {}, orderBy: [LogTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogTypeWhereUniqueInput): [LogType!]
  logTypesCount(where: LogTypeWhereInput! = {}): Int
  logCategory(where: LogCategoryWhereUniqueInput!): LogCategory
  logCategories(where: LogCategoryWhereInput! = {}, orderBy: [LogCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogCategoryWhereUniqueInput): [LogCategory!]
  logCategoriesCount(where: LogCategoryWhereInput! = {}): Int
  logGroup(where: LogGroupWhereUniqueInput!): LogGroup
  logGroups(where: LogGroupWhereInput! = {}, orderBy: [LogGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LogGroupWhereUniqueInput): [LogGroup!]
  logGroupsCount(where: LogGroupWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
